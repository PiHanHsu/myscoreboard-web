<style>
	.controls {
	  margin-top: 10px;
	  border: 1px solid transparent;
	  border-radius: 2px 0 0 2px;
	  box-sizing: border-box;
	  -moz-box-sizing: border-box;
	  height: 32px;
	  outline: none;
	  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
	}

	#pac-input {
	  background-color: #fff;
	  font-family: Roboto;
	  font-size: 15px;
	  font-weight: 300;
	  margin-left: 12px;
	  padding: 0 11px 0 13px;
	  text-overflow: ellipsis;
	  width: 300px;
	}

	#pac-input:focus {
	  border-color: #4d90fe;
	}

	.pac-container {
	  font-family: Roboto;
	  z-index: 2000;
	}
</style>
<div class="container">
	<div class="row header_tab">
		<div class="col-md-offset-4 col-md-8 col-sm-12 wrap_nav_tabs">
			<div class="nav nav-tabs" id = "nav_tabs">
				<% if @teams %>
				<% @teams.each do |team| %>
				<li class="<%= 'active' if @team_tab == team %>" id="team_tab">
					<%= link_to team.name, teams_path(team: team) %>
				</li>
				<% end %>
				<% end %>
				<li id="team_tab">
					<%= link_to new_team_path, remote: true, class: "btn-lg button_fix add_team_button" do %>
						<i class="fa fa-plus" aria-hidden="true"></i>
					<% end %>
				</li>
			</div>
		</div>
	</div>
	<div class="row teams_wrap">

		<% if @team_tab %>
		<%= render :partial => 'team_list', :locals => { :team => @team_tab }  %>
		<% end %>

	</div>

	<!-- Modal -->
	<div class="modal fade" id="teamModal" tabindex="-1" role="dialog" aria-labelledby="createModalLabel">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
					<h4 class="modal-title" id="createModalLabel"></h4>
				</div>
				<div class="modal-body">

				</div>
			</div>
		</div>
	</div>

</div>




<script>

$('#teamModal').on('shown.bs.modal', function (e) {

  $("form").on("keypress", function (e) {
    if (e.keyCode == 13) {
      return false;
    }
  });
  
  var map = new google.maps.Map(document.getElementById('map'), {
    center: {lat: -33.8688, lng: 151.2195},
    zoom: 13
  });
  console.log(map);
  var input = /** @type {!HTMLInputElement} */(
      document.getElementById('pac-input'));

  var autocomplete = new google.maps.places.Autocomplete(input);
  autocomplete.bindTo('bounds', map);

  var infowindow = new google.maps.InfoWindow();
  var marker = new google.maps.Marker({
    map: map,
    anchorPoint: new google.maps.Point(0, -29)
  });

  autocomplete.addListener('place_changed', function() {
    infowindow.close();
    marker.setVisible(false);
    var place = autocomplete.getPlace();
    if (!place.geometry) {
      window.alert("Autocomplete's returned place contains no geometry");
      return;
    }

    // If the place has a geometry, then present it on a map.
    if (place.geometry.viewport) {
      map.fitBounds(place.geometry.viewport);
    } else {
      map.setCenter(place.geometry.location);
      map.setZoom(17);  // Why 17? Because it looks good.
    }
    marker.setIcon(/** @type {google.maps.Icon} */({
      url: place.icon,
      size: new google.maps.Size(71, 71),
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(17, 34),
      scaledSize: new google.maps.Size(35, 35)
    }));
    marker.setPosition(place.geometry.location);
    marker.setVisible(true);

    var address = '';
    if (place.address_components) {
      address = [
        (place.address_components[0] && place.address_components[0].short_name || ''),
        (place.address_components[1] && place.address_components[1].short_name || ''),
        (place.address_components[2] && place.address_components[2].short_name || '')
      ].join(' ');
    }

    infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
    infowindow.open(map, marker);
    fillInAddress(place);

  });

	function fillInAddress(place) {
    document.getElementById('place_name').value = place.name;
    document.getElementById('formatted_address').value = place.formatted_address;
    document.getElementById('latitude').value = place.geometry.location.lat();
    document.getElementById('longitude').value = place.geometry.location.lng();
    document.getElementById('place_id').value = place.place_id;
  }
});

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD9Phzy4CZWofeZD3RnEuFemlWTaM4n_po&libraries=places" async defer></script>

